install.packages("KernSmooth")
library(KernSmooth)
setwd("~/")
setwd("D:/Education/Data Science/Working Directory")
dir()
make.NagLogLik <- function(data, fixed=c(FALSE,FALSE)){
params <- fixed
function(p){
params[!fixed]<-p
mu <- params[1]
sigma <- params[2]
a<- -0.5*length(data)*log(2*pi*sigma^2)
b<- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
?NagLogLik
??NagLogLik
set.seed(1);
normals <-rnorm(100,1,2)
class(normals)
length(normals)
normals
means(normals)
mean(normals)
std(normals)
normals <-rnorm(100,1,2)
mean(normals)
normals <-rnorm(100,1,2)
mean(normals)
nLL<-make.NagLogLik(normals)
nLL
environment(nLL)
ls(environment(nLL))
?ls
ls(envirnoment(make.NagLogLik()))
optim(c(mu=0,sigma=1),nLL)
optim(c(mu=0,sigma=1),nLL)$par
nLL<-make.NegLogLik(normals,c(1,FALSE))
nLL<-make.NegLogLik(normals
)
?source
source(Scoping_Rules_3.R)
source("Scoping_Rules_3.R")
nLL<-make.NegLogLik(normals,c(1,FALSE))
?make.NegLogLik
nLL<-make.NagLogLik(normals)
nLL
nLL<-make.NagLogLik(normals,c(1,FALSE))
x<-seq(1.7,1.9.len=100)
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="1")
plot(x,exp(-(y-min(y))),type=1)
plot(x,exp(-(y-min(y))),type="1")
?plot
plot(x,exp(-(y-min(y))),type="l")
class(nLL)
optim(c(mu=0,sigma=1),nLL)$par
nLL
x<-as.date("1970-01-01")
x<-as.Date("1970-01-01")
unclass(x)
x + 5
unclass(x+5)
cube<-function(x,n){
x^3
}
cube(3)
x<-1:10
if(x>5){x<-0}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
load("D:/Education/Data Science/02 - R Programming/Programming_Assignments/ProgrammingAssignment1/ProgrammingAssignment1.RData")
ls()
setwd("D:/Education/Data Science/05 - Reproducible Research/Assignment 1/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
sum(is.na(activity$steps))
head(activity[is.na(activity$steps),"interval"])
avg_acrs_all_day <- aggregate(activity$step, by = list(activity$interval),FUN = "mean",na.rm=TRUE)
names(avg_acrs_all_day) <- c("interval", "steps")
na_interval <- activity[is.na(activity$steps),"interval"]
View(avg_acrs_all_day)
avg_acrs_all_day[activity[is.na(activity$steps),"interval"],"steps"]
activity[is.na(activity$steps),"interval"]
t<-activity[is.na(activity$steps),c("interval","steps")]
View(t)
?rapply
View(avg_acrs_all_day)
View(avg_acrs_all_day)
t1 <- avg_acrs_all_day[avg_acrs_all_day$interval ==activity[is.na(activity$steps),"interval"],"steps"]
t[2017]
t[2017,]
t[289,]
t1[289,]
t1[289]
t1
t <- merge(x=activity,y=avg_acrs_all_day, by="interval", all.x=TRUE)
View(t)
activity <- read.csv("activity.csv")
avg_acrs_all_day <- aggregate(activity$step, by = list(activity$interval),FUN = "mean",na.rm=TRUE)
names(avg_acrs_all_day) <- c("interval", "steps")
length(unique(activity$interval))
t <- is.na(activity$steps)
head(activity(t,"interval"))
head(activity[t,"interval"])
l <- activity[t,"interval"]
avg_acrs_all_day[,"steps"][avg_acrs_all_day$interval %in% l]
avg_acrs_all_day[,"steps"][l in avg_acrs_all_day$interval]
avg_acrs_all_day[,"steps"][l %in% avg_acrs_all_day$interval]
avg_acrs_all_day[match(l,avg_acrs_all_day$interval),"steps"]
a <- activity
length(a[is.na(a$steps)])
a[t,"steps"]
a[t,"steps"] <- avg_acrs_all_day[match(l,avg_acrs_all_day$interval),"steps"]
View(a)
View(avg_acrs_all_day)
head(a);head(avg_acrs_all_day)
View(a)
activity <- read.csv("activity.csv")
avg_acrs_all_day <- aggregate(activity$step, by = list(activity$interval),FUN = "mean",na.rm=TRUE)
names(avg_acrs_all_day) <- c("interval", "steps")
# Initialize filled dataset same as activity dataset
filled_dataset <- activity
# Return interval values corresponding to NA steps in activity dataset
na_intervals <- activity[is.na(activity$steps),"interval"]
# Replace NA steps in filled_dataset by the average for that interval in avg_acrs_all_day dataset
filled_dataset[is.na(filled_dataset$steps),"steps"] <- avg_acrs_all_day[match(na_intervals,avg_acrs_all_day$interval),"steps"]
View(filled_dataset)
View(activity)
ggplot(tt_step, aes(date, steps)) +
- Different in Median:
?weekdays
head(weekdays(filled_dataset$date))
head(weekdays(date(filled_dataset$date)))
head(weekdays(as.date(filled_dataset$date)))
head(weekdays(as.Date(filled_dataset$date)))
filled_dataset$datetype <- if weekdays(as.Date(filled_dataset$date)) %in% c("Saturday","Sunday") "weekends"
else "weekdays"
filled_dataset$datetype <- if (weekdays(as.Date(filled_dataset$date)) %in% c("Saturday","Sunday")) "weekends"
else "weekdays"
weekends <- weekdays(as.Date(filled_dataset$date)) %in% c("Saturday","Sunday")
datetype <- if(weekends == TRUE) "weekends" else "weekdays"
datetype <- lapply(weekends,function(x) {if(x == TRUE) "weekends" else "weekdays"})
datetype <- sapply(weekends,function(x) {if(x == TRUE) "weekends" else "weekdays"})
datetype <- sapply(weekdays(as.Date(filled_dataset$date)),function(x) {if(x %in% c("Saturday","Sunday")) "weekends" else "weekdays"})
datetype <- sapply(as.Date(filled_dataset$date),function(x) {if(weekdays(x) %in% c("Saturday","Sunday")) "weekends" else "weekdays"})
filled_dataset$datetype <- datetype
tt_step3 <- aggregate(filled_dataset$steps, by = list(filled_dataset$datetype, filled_dataset$interval),FUN = "mean",na.rm=TRUE)
names(tt_step3) <- c("datetype","interval","steps")
ggplot(tt_step3, aes(interval, steps)) + facet_grid(. ~ tt_step3$datetype)
geom_line() +
ggtitle(expression(atop("Average daily activity pattern", atop(italic("Weekends vs Weekdays")))))
library(ggplot2)
ggplot(tt_step3, aes(interval, steps)) + facet_grid(. ~ tt_step3$datetype)
geom_line() +
ggtitle(expression(atop("Average daily activity pattern", atop(italic("Weekends vs Weekdays")))))
ggplot(tt_step3, aes(interval, steps)) + facet_grid(. ~ tt_step3$datetype) +
geom_line() +
ggtitle(expression(atop("Average daily activity pattern", atop(italic("Weekends vs Weekdays")))))
ggplot(tt_step3, aes(interval, steps)) + facet_grid(. ~ datetype) +
geom_line() +
ggtitle(expression(atop("Average daily activity pattern", atop(italic("Weekends vs Weekdays")))))
